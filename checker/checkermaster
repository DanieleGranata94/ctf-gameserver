#!/usr/bin/python3

import logging
import argparse
import configparser
import asyncio
import asyncio.subprocess
import psycopg2
import base64
import datetime
import codecs

import flag
from checker import string_to_result

MAXRUNTIME = datetime.timedelta(minutes = 1)
conteststart = None
flagvalidity = None
tickduration = None
open_tasks = dict()

def do_store(line, dbconnection, service, team):
    with dbconnection:
        with dbconnection.cursor() as cursor:
            ident = line[1]
            data = psycopg2.Binary(base64.b64decode(line[2]))

            cursor.execute("""INSERT INTO checkercache
                                 (service_id,team_id,identifier,data)
                              VALUES
                                 (%s, %s, %s, %s)""",
                           (service, team, ident, data))


def do_retrieve(line, dbconnection, service, team):
    with dbconnection:
        with dbconnection.cursor() as cursor:
            ident = line[1]
            cursor.execute("""SELECT data FROM checkercache
                              WHERE team_id = %s
                                AND service_id = %s
                                AND identifier = %s""",
                           (team, service, ident))
            data = cursor.fetchone()
    if data != None:
        data, = data
        data = base64.b64encode(data)
        return data
    return b""


def do_flag(line, service, team):
    tick = int(line[1])
    timestamp = conteststart.timestamp() + (flagvalidity + tick) * tickduration
    payload = None
    if len(line) > 2:
        payload = codecs.decode(line[2], 'hex')
    newflag = flag.generate(team=team, service=service, payload=payload,
                            timestamp=timestamp)
    return newflag


@asyncio.coroutine
def run_checker(service, team, tick, checker, loglevel, dbconnection):
    logger = logging.getLogger("service%02d-team%03d-tick%03d" % (service, team, tick))
    logger.info("running checker")
    result = None
    process = yield from asyncio.create_subprocess_exec("./checkerslave",
                                                        "--service", str(service),
                                                        "--team", str(team),
                                                        "--tick", str(tick),
                                                        "--loglevel", logging.getLevelName(loglevel),
                                                        "--ip", "10.66.%d.2" % team,
                                                        checker,
                                                        stdout=asyncio.subprocess.PIPE,
                                                        stderr=asyncio.subprocess.PIPE,
                                                        stdin=asyncio.subprocess.PIPE)

    while True:
        line = yield from process.stdout.readline()
        if process.returncode is not None:
            print(repr(process.returncode))

        if line == b'':
            err = yield from process.stderr.read()
            print(err.decode("utf-8"))
            return

        logger.debug(repr(line))
        line = line.decode('us-ascii').split()

        if "FLAG" == line[0]:
            newflag = do_flag(line, service, team)
            process.stdin.write(newflag.encode('us-ascii'))
            process.stdin.write(b"\n")

        elif "STORE" == line[0]:
            try:
                do_store(line, dbconnection, service, team)
                process.stdin.write(b"OK\n")
            except Exception as e:
                process.stdin.write(b"FAIL\n")
                logger.warn("Database store failed with %s", repr(e))

        elif "RETRIEVE" == line[0]:
            try:
                data = do_retrieve(line, dbconnection, service, team)
                process.stdin.write(data + b"\n")

            except Exception as e:
                process.stdin.write(b"\n")
                logger.warn("Database get failed with %s", repr(e))

        elif line[0] in ["OK", "TIMEOUT", "NOTWORKING", "NOTFOUND"]:
            result = line[0]
            break

    yield from process.wait()
    logger.info("checker finished with result %s", result)
    return result


def get_fresh_jobs(gamedb, cachedb, config):
    loop = asyncio.get_event_loop()
    loop.call_later(int(config['CTF']['refresh']), get_fresh_jobs, gamedb, cachedb, config)


    tasks = list(open_tasks.keys())
    for task in tasks:
        service, team, tick, starttime = open_tasks[task]
        if task.done():
            try:
                result = string_to_result(task.result())
                with gamedb:
                    with gamedb.cursor() as cursor:
                        cursor.execute("""INSERT INTO scoring_statuscheck
                                             (service_id, team_id, tick, status, timestamp)
                                          VALUES
                                             (%s, %s, %s, %s, now())""",
                                       (service, team, tick, result))
                        del open_tasks[task]
            except Exception as e:
                print(repr(e))
        elif starttime + MAXRUNTIME < datetime.datetime.now():
            logging.warn("aborting job(service=%d, team=%d, tick=%d) due to timeout",
                         service, team, tick)
            if task.cancel():
                del open_tasks[task]

    current_tasks = len(open_tasks)
    new_tasks = int(config['CTF']['maxtasks']) - current_tasks
    logging.info("Currently running %d tasks, starting up to %d fresh ones",
                 current_tasks, new_tasks)

    try:
        jobs = []
        with gamedb:
            with gamedb.cursor() as cursor:
                cursor.execute("""SELECT sc.id, protecting_team_id, sc.tick
                                  FROM scoring_flag sc, scoring_gamecontrol gc
                                  WHERE placement_start is NULL
                                    AND sc.tick = gc.current_tick
                                    AND sc.service_id = %s
                                  ORDER BY RANDOM()
                                  LIMIT %s""",
                               (config['CTF']['serviceid'], new_tasks))
                jobs = cursor.fetchall()
                cursor.executemany("""UPDATE scoring_flag
                                      SET placement_start = now()
                                      WHERE id = %s""",
                                   [ (job[0],) for job in jobs ])

        for _, team, tick in jobs:
            service = int(config['CTF']['serviceid'])
            checker = config['CTF']['checker']
            task = loop.create_task(run_checker(service, team, tick, checker,
                                                logging.getLogger().level, cachedb))
            open_tasks[task] = service, team, tick, datetime.datetime.now()
        logging.info("started %d (of %d possible) new jobs", len(jobs), new_tasks)

    except Exception as e:
        print(repr(e))


def main():
    logging.basicConfig()

    parser = argparse.ArgumentParser(description="CTF checker runner")
    parser.add_argument('--config', type=str, required=True)
    parser.add_argument('-v', '--loglevel', default='WARNING', type=str,
                        choices=['DEBUG', 'INFO', 'WARNING', 'ERROR', 'CRITICAL'],
                        help='Loglevel')

    args = parser.parse_args()

    config = configparser.ConfigParser()
    config.read(args.config)

    numeric_level = getattr(logging, args.loglevel.upper())
    logging.getLogger().setLevel(numeric_level)

    logging.debug("connecting to database")
    cachedb = psycopg2.connect(database=config['checkerdatabase']['database'],
                               host=config['checkerdatabase']['host'],
                               user=config['checkerdatabase']['user'],
                               password=config['checkerdatabase']['password'])
    gamedb = psycopg2.connect(database=config['gamedatabase']['database'],
                              host=config['gamedatabase']['host'],
                              user=config['gamedatabase']['user'],
                              password=config['gamedatabase']['password'])

    with gamedb:
        with gamedb.cursor() as cursor:
            global conteststart, flagvalidity, tickduration
            cursor.execute("""SELECT start, valid_ticks, tick_duration
                              FROM scoring_gamecontrol""")
            conteststart, flagvalidity, tickduration = cursor.fetchone()

    loop = asyncio.get_event_loop()
    loop.call_soon(get_fresh_jobs, gamedb, cachedb, config)
    try:
        import systemd
        systemd.daemon.notify("READY=1")
    except ImportError:
        pass

    loop.run_forever()

if __name__ == '__main__':
    main()
